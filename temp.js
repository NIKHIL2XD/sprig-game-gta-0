
// @title: the real football
// @tags: ['football', 'soccer']
// @addedOn: 2022-07-26
// @author: Nikhil

const player = "p";
const ball = "b";
const goalpost = "g";
const hurdle = "w";
const move = tune`
500: B5^500 + E5^500,
15500`;


setLegend(
  [ player, bitmap`
......FFC.......
....CFCCCF......
....FCCC2CC.....
....C2020CC.....
.....22222CC....
......222.......
....757575......
....575757......
....257572......
....275752......
....193931......
.....3939.......
.....2..2.......
.....2..2.......
.....L..L.......
.....LL.LL......`],
  [ ball, bitmap`
................
................
................
................
................
....000.........
..00L2L00.......
.0LLL22220......
.0LLL2LL20......
022222LL220.....
022222LL2L0.....
0LLL22222L0.....
.0LL222220......
.0222LLL20......
..002LL00.......
....000.........`],
  [ goalpost, bitmap`
.......00000....
.......0LLL00...
.......0000L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
..........0L0...
.......0000L0...
.......0LLL00...
.......00000....`],
  [ hurdle, bitmap`
......101.......
.....11011......
.....10001......
....110L011.....
.....10L01......
....110L011.....
.....10L01......
....1102011.....
.....10L01......
....110L011.....
.....10L01......
....110L011.....
.....10L01......
....1100011.....
.....11011......
......101.......`]
);


// create game levels
let level = 0; // this tracks the level we are on
const levels = [
  map`
..p.
.b.g
....`,
  map`
p..
.b.
..g`,
  map`
p.wg
.bw.
....
.w..`,
  map`
p...
...b
...b
.bbg`,
  map`
...
.p.
...`,
  map`
p.w.
.bwg
....
..bg`
];

// set the map displayed to the current level
const currentLevel = levels[level];
setMap(currentLevel);

setSolids([ player, box, wall ]); // other sprites cannot go inside of these sprites

// allow certain sprites to push certain other sprites
setPushables({
  [player]: [ box ],
  [box]: [ box ]
});

// inputs for player movement control
onInput("s", () => {
  getFirst(player).y += 1; // positive y is downwards
  playTune(move);
});

onInput("d", () => {
  getFirst(player).x += 1;
  playTune(move);
});

onInput("w", () => {
    getFirst(player).y -= 1;
    playTune(move);
});

onInput("a", () => {
    getFirst(player).x -= 1;
    playTune(move);
});

// input to reset level
onInput("j", () => {
  const currentLevel = levels[level]; // get the original map of the level

  // make sure the level exists before we load it
  if (currentLevel !== undefined) {
    clearText("");
    setMap(currentLevel);
  }
});

// these get run after every input
afterInput(() => {
  // count the number of tiles with goals
  const targetNumber = tilesWith(goal).length;
  
  // count the number of tiles with goals and boxes
  const numberCovered = tilesWith(goal, box).length;

  // if the number of goals is the same as the number of goals covered
  // all goals are covered and we can go to the next level
  if (numberCovered === targetNumber) {
    // increase the current level number
    level = level + 1;

    const currentLevel = levels[level];

    // make sure the level exists and if so set the map
    // otherwise, we have finished the last level, there is no level
    // after the last level
    if (currentLevel !== undefined) {
      setMap(currentLevel);
    } else {
      addText("you win!", { y: 4, color: color`H` });
    }
  }
});